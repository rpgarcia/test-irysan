.docker_login:
  script:
  - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ECR_REGISTRY

.docker_build_and_push:
  script:
  - |-
    # Function to build and push Docker images
    build_and_push_image() {
      local build_args=""
      if [ -n "$BUILD_ARGS" ]; then
        for arg in $BUILD_ARGS; do
          build_args="$build_args --build-arg $arg"
        done
      fi

      echo $build_args

      echo "docker build --no-cache $build_args -t '$CI_PROJECT_NAME:$CI_COMMIT_SHORT_SHA-$ENV' -f '$DOCKERFILE' ."
      docker build --no-cache $build_args -t "$CI_PROJECT_NAME:$CI_COMMIT_SHORT_SHA-$ENV" -f "$DOCKERFILE" .

      if [ -n "$CI_COMMIT_TAG" ]; then
        IMAGE_TAG="$CI_COMMIT_TAG-$ENV"
        local tags_docker_build="$IMAGE_TAG"
      else
        local tags_docker_build="$CI_COMMIT_SHORT_SHA-$ENV"
      fi

      for tag in $tags_docker_build; do
        echo $tag
        docker tag "$CI_PROJECT_NAME:$CI_COMMIT_SHORT_SHA-$ENV" "$AWS_ECR_REGISTRY/$CI_PROJECT_NAME:$tag"
        # docker push "$AWS_ECR_REGISTRY/$CI_PROJECT_NAME:$tag"
      done
    }

    # Check if REBUILD is true or not
    if [ "$REBUILD" = "true" ]; then
      build_and_push_image
    else
      if docker manifest inspect "$AWS_ECR_REGISTRY/$CI_PROJECT_NAME:$CI_COMMIT_SHORT_SHA-$ENV" > /dev/null 2>&1; then
        echo "The image has already been created, check on ECR please."
      else
        build_and_push_image
      fi
    fi
